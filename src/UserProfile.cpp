#include "../include/UserProfile.h"
#include <iostream>
#include <fstream>
#include <filesystem>
#include <sstream>
#include <iomanip>
#include <limits>
#include <algorithm>

UserProfile::UserProfile(const std::string& configDir)
    : configDirectory(configDir), homeState(""), timezone(""),
      filingStatus(FilingStatus::SINGLE), profileExists(false)
{
    initializeOptions();
    profileExists = loadProfile();
}

void UserProfile::initializeOptions()
{
    // Common US timezones
    timezoneOptions = {
        {"1", "America/New_York (Eastern Time)"},
        {"2", "America/Chicago (Central Time)"},
        {"3", "America/Denver (Mountain Time)"},
        {"4", "America/Los_Angeles (Pacific Time)"},
        {"5", "America/Phoenix (Arizona Time)"},
        {"6", "America/Anchorage (Alaska Time)"},
        {"7", "Pacific/Honolulu (Hawaii Time)"}
    };

    // US states
    stateOptions = {
        {"AL", "Alabama"}, {"AK", "Alaska"}, {"AZ", "Arizona"}, {"AR", "Arkansas"},
        {"CA", "California"}, {"CO", "Colorado"}, {"CT", "Connecticut"}, {"DE", "Delaware"},
        {"FL", "Florida"}, {"GA", "Georgia"}, {"HI", "Hawaii"}, {"ID", "Idaho"},
        {"IL", "Illinois"}, {"IN", "Indiana"}, {"IA", "Iowa"}, {"KS", "Kansas"},
        {"KY", "Kentucky"}, {"LA", "Louisiana"}, {"ME", "Maine"}, {"MD", "Maryland"},
        {"MA", "Massachusetts"}, {"MI", "Michigan"}, {"MN", "Minnesota"}, {"MS", "Mississippi"},
        {"MO", "Missouri"}, {"MT", "Montana"}, {"NE", "Nebraska"}, {"NV", "Nevada"},
        {"NH", "New Hampshire"}, {"NJ", "New Jersey"}, {"NM", "New Mexico"}, {"NY", "New York"},
        {"NC", "North Carolina"}, {"ND", "North Dakota"}, {"OH", "Ohio"}, {"OK", "Oklahoma"},
        {"OR", "Oregon"}, {"PA", "Pennsylvania"}, {"RI", "Rhode Island"}, {"SC", "South Carolina"},
        {"SD", "South Dakota"}, {"TN", "Tennessee"}, {"TX", "Texas"}, {"UT", "Utah"},
        {"VT", "Vermont"}, {"VA", "Virginia"}, {"WA", "Washington"}, {"WV", "West Virginia"},
        {"WI", "Wisconsin"}, {"WY", "Wyoming"}, {"DC", "District of Columbia"}
    };
}

bool UserProfile::loadProfile()
{
    std::ifstream file(getConfigFilePath());
    if (!file.is_open()) {
        return false;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip empty lines and comments
        if (line.empty() || line[0] == '#') continue;

        std::istringstream iss(line);
        std::string key, value;
        if (std::getline(iss, key, '=') && std::getline(iss, value)) {
            if (key == "home_state") {
                homeState = value;
            } else if (key == "timezone") {
                timezone = value;
            } else if (key == "filing_status") {
                filingStatus = stringToFilingStatus(value);
            }
        }
    }

    file.close();
    return !homeState.empty() && !timezone.empty();
}

bool UserProfile::saveProfile()
{
    try {
        std::filesystem::create_directories(configDirectory);
    } catch (const std::filesystem::filesystem_error& e) {
        std::cout << "Warning: Could not create config directory: " << e.what() << std::endl;
        return false;
    }

    std::ofstream file(getConfigFilePath());
    if (!file.is_open()) {
        std::cout << "Error: Could not create user profile file." << std::endl;
        return false;
    }

    file << "# User Profile Configuration\n";
    file << "# Generated by Gambling Tax Calculator Setup Wizard\n\n";
    file << "home_state=" << homeState << "\n";
    file << "timezone=" << timezone << "\n";
    file << "filing_status=" << filingStatusToString(filingStatus) << "\n";

    file.close();
    profileExists = true;
    return true;
}

void UserProfile::runSetupWizard()
{
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "           GAMBLING TAX CALCULATOR - FIRST TIME SETUP\n";
    std::cout << std::string(60, '=') << "\n\n";

    std::cout << "Welcome! Let's configure your profile for accurate tax calculations.\n";
    std::cout << "This setup only needs to be done once.\n\n";

    // Get home state
    std::cout << "STEP 1: Home State Selection\n";
    std::cout << "Your home state determines which tax rules apply to your gambling income.\n\n";

    std::cout << "Common states:\n";
    std::cout << "  CA - California    FL - Florida     NV - Nevada      TX - Texas\n";
    std::cout << "  NY - New York      NJ - New Jersey  PA - Pennsylvania\n\n";

    while (true) {
        std::cout << "Enter your home state code (e.g., CA, NY, TX): ";
        std::string input;
        std::getline(std::cin, input);

        // Convert to uppercase
        std::transform(input.begin(), input.end(), input.begin(), ::toupper);

        if (stateOptions.find(input) != stateOptions.end()) {
            homeState = input;
            std::cout << "✓ Home state set to: " << stateOptions[input] << "\n\n";
            break;
        } else {
            std::cout << "Invalid state code. Please enter a valid 2-letter state code.\n";
        }
    }

    // Get timezone
    std::cout << "STEP 2: Timezone Selection\n";
    std::cout << "Your timezone ensures accurate date handling for session entries.\n\n";

    for (const auto& option : timezoneOptions) {
        std::cout << "  " << option.first << ". " << option.second << "\n";
    }

    while (true) {
        std::cout << "\nSelect your timezone (1-7): ";
        std::string input;
        std::getline(std::cin, input);

        if (timezoneOptions.find(input) != timezoneOptions.end()) {
            // Extract the timezone identifier from the display string
            std::string tzDisplay = timezoneOptions[input];
            size_t spacePos = tzDisplay.find(' ');
            timezone = tzDisplay.substr(0, spacePos);
            std::cout << "✓ Timezone set to: " << tzDisplay << "\n\n";
            break;
        } else {
            std::cout << "Invalid selection. Please enter a number from 1-7.\n";
        }
    }

    // Get filing status
    std::cout << "STEP 3: Tax Filing Status\n";
    std::cout << "Your filing status affects tax calculations and deduction limits.\n\n";
    std::cout << "  1. Single\n";
    std::cout << "  2. Married Filing Jointly\n";
    std::cout << "  3. Married Filing Separately\n";
    std::cout << "  4. Head of Household\n";

    while (true) {
        std::cout << "\nSelect your filing status (1-4): ";
        std::string input;
        std::getline(std::cin, input);

        if (input == "1") {
            filingStatus = FilingStatus::SINGLE;
            std::cout << "✓ Filing status set to: Single\n\n";
            break;
        } else if (input == "2") {
            filingStatus = FilingStatus::MARRIED_FILING_JOINTLY;
            std::cout << "✓ Filing status set to: Married Filing Jointly\n\n";
            break;
        } else if (input == "3") {
            filingStatus = FilingStatus::MARRIED_FILING_SEPARATELY;
            std::cout << "✓ Filing status set to: Married Filing Separately\n\n";
            break;
        } else if (input == "4") {
            filingStatus = FilingStatus::HEAD_OF_HOUSEHOLD;
            std::cout << "✓ Filing status set to: Head of Household\n\n";
            break;
        } else {
            std::cout << "Invalid selection. Please enter a number from 1-4.\n";
        }
    }

    // Save profile
    std::cout << "Saving your profile configuration...\n";
    if (saveProfile()) {
        std::cout << "✓ Profile saved successfully!\n\n";
        std::cout << "Setup complete! You can modify these settings later through\n";
        std::cout << "the main menu if needed.\n\n";
        std::cout << "Press Enter to continue to the main application...";
        std::cin.get();
    } else {
        std::cout << "✗ Error saving profile. Please check file permissions.\n\n";
    }
}

std::string UserProfile::getConfigFilePath() const
{
    return configDirectory + "/user_profile.cfg";
}

void UserProfile::displayCurrentProfile() const
{
    std::cout << "Current User Profile:\n";
    std::cout << "  Home State: " << stateOptions.at(homeState) << " (" << homeState << ")\n";
    std::cout << "  Timezone: " << timezone << "\n";
    std::cout << "  Filing Status: " << getFilingStatusString() << "\n";
}

std::string UserProfile::filingStatusToString(FilingStatus status) const
{
    switch (status) {
        case FilingStatus::SINGLE: return "single";
        case FilingStatus::MARRIED_FILING_JOINTLY: return "married_jointly";
        case FilingStatus::MARRIED_FILING_SEPARATELY: return "married_separately";
        case FilingStatus::HEAD_OF_HOUSEHOLD: return "head_of_household";
        default: return "single";
    }
}

FilingStatus UserProfile::stringToFilingStatus(const std::string& status) const
{
    if (status == "married_jointly") return FilingStatus::MARRIED_FILING_JOINTLY;
    if (status == "married_separately") return FilingStatus::MARRIED_FILING_SEPARATELY;
    if (status == "head_of_household") return FilingStatus::HEAD_OF_HOUSEHOLD;
    return FilingStatus::SINGLE;
}